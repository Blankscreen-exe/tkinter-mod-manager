import shutil
import os

def copy_file(src_file, dst_dir):
  """
  Copies a file from the source path to the destination directory.

  Args:
      src_file: The path to the source file.
      dst_dir: The path to the destination directory.
  """
  try:
    shutil.copy2(src_file, dst_dir)
    print(f"File '{src_file}' copied successfully to '{dst_dir}'")
  except FileNotFoundError:
    print(f"Error: File '{src_file}' not found.")
  except shutil.Error as e:
    print(f"Error copying file: {e}")
    

def delete_file(file_path):
  """
  Deletes a file at the specified path.

  Args:
      file_path: The path to the file to be deleted.
  """
  try:
    if os.path.exists(file_path):
      os.remove(file_path)
      print(f"File '{file_path}' deleted successfully.")
    else:
      print(f"Error: File '{file_path}' not found.")
  except OSError as e:
    print(f"Error deleting file: {e}")
    
def file_exists(file_path, folder_path):
  """
  Checks if a specific file exists inside a folder.

  Args:
      file_path: The name of the file to check.
      folder_path: The path to the folder where the file might exist.

  Returns:
      True if the file exists inside the folder, False otherwise.
  """
  full_path = os.path.join(folder_path, file_path)
  return os.path.isfile(full_path)


def copy_all_files(src_dir, dst_dir):
  """
  Copies all files from a source directory to a destination directory.

  Args:
      src_dir: The path to the source directory.
      dst_dir: The path to the destination directory.
  """
  for filename in os.listdir(src_dir):
    if os.path.isfile(os.path.join(src_dir, filename)):
      src_file = os.path.join(src_dir, filename)
      dst_file = os.path.join(dst_dir, filename)
      copy_file(src_file, dst_dir)

    
def copy_files(src_dir: str, file_names: list, dst_dir: str) -> None:
  """
  Copies files from source directory to destination directory.

  Args:
    src_dir: The source directory path.
    file_names: The list of file names to copy.
    dst_dir: The destination directory path.
  """
  for file_name in file_names:
    src_path = os.path.join(src_dir, file_name)
    dst_path = os.path.join(dst_dir, file_name)
    if os.path.isfile(src_path):
      os.makedirs(dst_dir, exist_ok=True)  # Create destination directory if it doesn't exist
      # os.replace(os.path.join(src_dir, file_name), os.path.join(dst_dir, file_name))  # Replace file to avoid overwrite issues
      copy_file(os.path.join(src_dir, file_name), os.path.join(dst_dir, file_name))
    else:
      print(f"File not found: {src_path}")
      
def get_folder_names(folder_path):
  """
  Returns a list of folder names inside a given folder.

  Args:
      folder_path: The path to the folder.

  Returns:
      A list of folder names within the given folder.
  """
  try:
    return [name for name in os.listdir(folder_path) if os.path.isdir(os.path.join(folder_path, name))]
  except Exception as e:
    print(f"Error getting folder names: {e}")
    return []

def get_folder_contents(folder_path):
  """
  Returns a list of dictionaries containing folder names and their files.

  Args:
      folder_path: The path to the main folder.

  Returns:
      A list of dictionaries with "folder_name" and "files" keys.
  """
  folder_data = []
  for folder_name in get_folder_names(folder_path):
    subfolder_path = os.path.join(folder_path, folder_name)
    files = [f for f in os.listdir(subfolder_path) if os.path.isfile(os.path.join(subfolder_path, f))]
    folder_data.append({"folder_name": folder_name, "files": files})
  return folder_data

def delete_corresponding_files(folder_contents, sub_folder_name, folder_b_path):
  """
  Deletes corresponding files in another folder based on subfolder contents.

  Args:
      folder_contents: The list of folder information generated by get_folder_contents.
      sub_folder_name: The name of the subfolder within FOLDER_A.
      folder_b_path: The path to the folder where files need to be deleted.
  """
  for folder in folder_contents:
    if folder["folder_name"] == sub_folder_name:
      for filename in folder["files"]:
        full_path = os.path.join(folder_b_path, filename)
        if os.path.exists(full_path):
          try:
            os.remove(full_path)
            print(f"File '{filename}' deleted from '{folder_b_path}'")
          except OSError as e:
            print(f"Error deleting file: {e}")
  print(f"Finished deleting corresponding files for '{sub_folder_name}' in '{folder_b_path}'.")